"""Methods to extract a GPAD 2.0 from merged GAFs."""

import datetime
from pathlib import Path

import pystow
from ontobio.ecomap import EcoMap
from ontobio.io.gafparser import GafParser

from src.gopreprocess.file_processors.gpad_processor import GpadProcessor
from src.utils.decorators import timer
from src.utils.download import download_file


@timer
def configure_parser() -> GafParser:
    """
    Configures and returns a GafParser object.

    :return: A configured GafParser object.
    :rtype: GafParser
    """
    p = GafParser()
    p.config.ecomap = EcoMap()
    p.config.remove_double_prefixes = True
    return p


@timer
def concatenate_files(file_path1, file_path2, output_file_path):
    """
    Concatenates the contents of two files, strips headers, and writes them to a new output file.

    :param file_path1: Path to the first input file.
    :param file_path2: Path to the second input file.
    :param output_file_path: Path to the output file where the concatenated result will be saved.
    """
    header1 = ""
    header2 = ""
    content1 = ""
    content2 = ""

    # Read and process the first file
    with open(file_path1, "r") as infile1:
        for line in infile1:
            if line.startswith("!"):
                header1 += line
            else:
                content1 += line

    # Read and process the second file
    with open(file_path2, "r") as infile2:
        for line in infile2:
            if line.startswith("!"):
                header2 += line
            else:
                content2 += line

    # Concatenate headers and contents
    final_header = header1 + header2
    final_content = content1 + content2

    # Write the concatenated result to the output file
    with open(output_file_path, "w") as outfile:
        outfile.write(final_header)
        outfile.write(final_content)


@timer
def generate_gpad_file() -> tuple[Path, Path]:
    """
    Parses the merged GAF file, as well as the MGI noctua file and reprocess as GPAD2.0 annotations.

    Note: this is likely a temporary bit of code that will be subsumed by changes to the GO_Central pipeline.
    :return: None.
    """
    noctua_gpad = download_file(target_directory_name="MGI_NOCTUA", config_key="MGI_NOCTUA", gunzip=True)

    gp = GpadProcessor(noctua_gpad)
    new_noctua_gpad = gp.convert_noctua_gpad()

    merged_gaf_filepath = pystow.join(
        key="MGI",
        name="mgi-merged.gaf",
        ensure_exists=True,
    )
    gpad_rows = []
    p = configure_parser()
    with open(merged_gaf_filepath, "r") as file:
        for line in file:
            line = line.replace('"', "")
            annotations = p.parse_line(line)
            if annotations:
                for assoc in annotations.associations:
                    if isinstance(assoc, dict):
                        continue  # skip the header
                    gpad_row = assoc.to_gpad_2_0_tsv()
                    gpad_rows.append(gpad_row)

    merged_gpad_filepath = pystow.join(
        key="MGI",
        name="mgi-preprocess-gafs-merged.gpad",
        ensure_exists=True,
    )

    all_merged_gpad_filepath = pystow.join(
        key="MGI",
        name="all-mgi.gpad",
        ensure_exists=True,
    )

    with open(merged_gpad_filepath, "w") as file:
        file.write("!gpad-version: 2.0\n")
        file.write("!Generated by: GO_Central preprocess pipeline: merged gaf and noctua gpad dump\n")
        file.write("!Date Generated: " + str(datetime.date.today()) + "\n")
        for row in gpad_rows:
            file.write("\t".join(map(str, row)) + "\n")

    concatenate_files(merged_gpad_filepath, new_noctua_gpad, all_merged_gpad_filepath)

    return merged_gpad_filepath, all_merged_gpad_filepath
