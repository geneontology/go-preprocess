"""Methods to extract a GPAD 2.0 from merged GAFs."""
import datetime
from pathlib import Path
from typing import Tuple

import pystow
from ontobio.ecomap import EcoMap
from ontobio.io.gafparser import GafParser
from src.utils.download import download_file
from src.utils.decorators import timer


@timer
def configure_parser() -> GafParser:
    """
    Configures and returns a GafParser object.

    :return: A configured GafParser object.
    :rtype: GafParser
    """
    p = GafParser()
    p.config.ecomap = EcoMap()
    p.config.remove_double_prefixes = True
    return p


@timer
def concatenate_files(file_path1, file_path2, output_file_path):
    """
    Concatenates the contents of two files and writes them to a new output file.

    :param file_path1: Path to the first input file.
    :param file_path2: Path to the second input file.
    :param output_file_path: Path to the output file where the concatenated result will be saved.
    """
    with open(output_file_path, 'w') as outfile:
        for fpath in [file_path1, file_path2]:
            with open(fpath, 'r') as infile:
                outfile.write(infile.read())



@timer
def get_gpad() -> tuple[Path, Path]:
    """
    Parses the merged GAF file, as well as the MGI noctua file and reprocess as GPAD2.0 annotations.

    Note: this is likely a temporary bit of code that will be subsumed by changes to the GO_Central pipeline.
    :return: None.
    """

    noctua_gpad = download_file(target_directory_name="MGI_NOCTUA", config_key="MGI_NOCTUA", gunzip=True)


    merged_gaf_filepath = pystow.join(
        key="MGI",
        name="mgi-merged.gaf",
        ensure_exists=True,
    )
    gpad_rows = []
    p = configure_parser()
    with open(merged_gaf_filepath, "r") as file:
        for line in file:
            annotations = p.parse_line(line)
            if annotations:
                for assoc in annotations.associations:
                    if isinstance(assoc, dict):
                        continue  # skip the header
                    if assoc.subject.id == "MGI:MGI:101757" or assoc.subject.id == "MGI:101757":
                        print(assoc.subject.id)
                    gpad_row = assoc.to_gpad_2_0_tsv()
                    gpad_rows.append(gpad_row)

    merged_gpad_filepath = pystow.join(
        key="MGI",
        name="mgi-preprocess-gafs-merged.gpad",
        ensure_exists=True,
    )

    all_merged_gpad_filepath = pystow.join(
        key="MGI",
        name="all-mgi.gpad",
        ensure_exists=True,
    )

    with open(merged_gpad_filepath, "w") as file:
        file.write("!gpad-version: 2.0\n")
        file.write("!Generated by: GO_Central preprocess pipeline: merged gaf gpad dump\n")
        file.write("!Date Generated: " + str(datetime.date.today()) + "\n")
        for row in gpad_rows:
            file.write("\t".join(map(str, row)) + "\n")

    concatenate_files(merged_gpad_filepath, noctua_gpad, all_merged_gpad_filepath)

    return merged_gpad_filepath, all_merged_gpad_filepath
