"""Methods to extract a GPAD 2.0 from merged GAFs."""
from ontobio.ecomap import EcoMap
from ontobio.io.gafparser import GafParser
from pathlib import Path
from src.utils.decorators import timer
import datetime
import pystow


@timer
def configure_parser() -> GafParser:
    """
    Configures and returns a GafParser object.

    :return: A configured GafParser object.
    :rtype: GafParser
    """
    p = GafParser()
    p.config.ecomap = EcoMap()
    p.config.remove_double_prefixes = True
    return p

@timer
def get_gpad() -> Path:
    """
    Parses the GAF file and processes the annotations.

    :return: None.
    """
    merged_gaf_filepath = pystow.join(
        key="MGI",
        name="mgi-merged-ortho.gaf",
        ensure_exists=True,
    )
    gpad_rows = []
    p = configure_parser()
    with open(merged_gaf_filepath, "r") as file:
        for line in file:
            annotations = p.parse_line(line)
            if annotations:
                for assoc in annotations.associations:
                    if isinstance(assoc, dict):
                        continue  # skip the header
                    gpad_row = assoc.to_gpad_2_0_tsv()
                    gpad_rows.append(gpad_row)

    merged_gpad_filepath = pystow.join(
        key="MGI",
        name="mgi-merged-gpad.gaf",
        ensure_exists=True,
    )
    file_contents = gpad_rows

    # here's the final write to the final file
    with open(merged_gpad_filepath, "w") as header_filepath:
        header_filepath.write("!gpad-version: 2.0\n")
        header_filepath.write("!Generated by: GO_Central preprocess pipeline\n")
        header_filepath.write("!Date Generated: " + str(datetime.date.today()) + "\n")
        header_filepath.writelines(file_contents)

    return merged_gpad_filepath
